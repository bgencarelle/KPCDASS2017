module multi_clk_div(
		input wire reset,
		input wire clk,
		output	div2,
		output	div4,
		output	div8,
		output	div16,
		output	div32,
		output	div64,
		output	div128,
		);
		
		reg [7:0] time_base_counter;
		always@ (posedge clk)
			if (reset == 1'b0)
				time_base_counter <= 0;
			else
				time_base_counter <= time_base_counter + 1'b1;
		
		wire hold2;
		assign hold2 = time_base_counter[1] ? 1'b1 : 1'b0;
		wire hold4;
		assign hold4 = time_base_counter[2] ? 1'b1 : 1'b0;
		wire hold8;
		assign hold8 = time_base_counter[3] ? 1'b1 : 1'b0; 
		wire hold16;
		assign hold16 = time_base_counter[4] ? 1'b1 : 1'b0;
		wire hold32;
		assign hold32 = time_base_counter[5] ? 1'b1 : 1'b0;
		wire hold64;
		assign hold64 = time_base_counter[6] ? 1'b1 : 1'b0;
		wire hold128;
		assign hold128 = time_base_counter[7] ? 1'b1 : 1'b0;
		
		always@(posedge clk)
			if(reset == 1'b0)
			begin
				div2 <= 1'b0;
				div4 <= 1'b0;
				div8 <= 1'b0;
				div16 <= 1'b0;
				div32 <= 1'b0;
				div64 <= 1'b0;
				div128 <= 1'b0;
			end
			else
			begin
				div2 <= hold2;
				div4 <= hold4;
				div8 <= hold8;
				div16 <= hold16;
				div32 <= hold32;
				div64 <= hold64;
				div128 <= hold128;
			end
endmodule