//CDA Lab 1 -Dr C Jakob, h_da May 2017 christian.jakob@h-da.de
//

module input_debounce(
input wire clk, input wire reset_n,
input wire d, output reg q
);

reg [1:0] sync_reg = 2'b00;
always@ (posedge clk)
  if (reset_n == 1'b0)
      sync_reg <= 2'b00;
  else
    sync_reg <= {sync_reg[0],d};

wire sclr;
assign sclr = sync_reg[0]^sync_reg[1];

reg[7:0] debounce_counter = 8'd0;
wire debounce_counter_max; assign debounce_counter_max = &debounce_counter;

always@(posedge clk)
  if((reset_n == 1'b0) || (sclr == 1'b1))
    debounce_counter <= 0;
  else
    if(debounce_counter_max == 1'b0)
      debounce_counter  <= debounce_counter + 1'b1;
    else
      debounce_counter 	<=	debounce_counter;

wire enable; assign enable = debounce_counter_max;

  always@(posedge clk)
    if(reset_n == 1'b0)
      q <= 1'b0;
    else
      if(enable)
        q <= sync_reg[1];
      else
        q <= q;

endmodule
