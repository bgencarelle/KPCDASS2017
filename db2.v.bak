module input_debounce(
    input clk,
    input trig, 
  // 1 for one clock cycle when the push-button goes down (i.e. just pushed)

);

reg trig_state,  // 1 as long as the push-button is active (down)
reg trig_down,
// First use two flip-flops to synchronize the PB signal the "clk" clock domain
reg trig_sync_0;  always @(posedge clk) trig_sync_0 <= trig;  
reg trig_sync_1;  always @(posedge clk) trig_sync_1 <= trig_sync_0;

// Next declare a 16-bits counter
reg [2:0] 	trig_cnt;
// When the push-button is pushed or released, we increment the counter
// The counter has to be maxed out before we decide that the push-button state has changed

wire trig_idle = (trig_state==PB_sync_1);
wire trig_cnt_max = &trig_cnt;	// true when all bits of PB_cnt are 1's


always @(posedge clk)
begin
if(trig_idle)
    trig_cnt <= 0;  // nothing's going on
else
begin
    trig_cnt <= trig_cnt + 1'b1;  // something's going on, increment the counter
    if(trig_cnt_max) trig_state <= ~trig_state;  // if the counter is maxed out, PB changed!

end


end

assign trig_down = ~trig_idle & trig_cnt_max & ~trig_state;
endmodule
